f^-1 ∘ f = id_a

F(f^-1 ∘ f) = F(f^-1) ∘ F(f) = F(id_a) = id_{F(a)}

F(f^-1) ∘ F(f) = id_{F(a)}


Functor preserves composition and identity => functor preserves inverses


-----

The schema of a directed graph
is the free category C
generated by

   src
  ---->
E        N
  ---->
   tgt

("pattern of two parallel arrows")


A directed graph is a functor F : C -> Set.

(functor gives concrete meaning to the pattern)


Recall:
The category Set has (small) sets as objects and functions as morphisms.

F : C -> Set
The functor F sends...
- E to the set of edges
  F(E) = {edges...}
- N to the set of nodes
  F(N) = {nodes...}
- src to the function which assigns to every edge its source node
  F(src) : F(E) -> F(N)
- tgt to the function which assigns to every edge its target node
  F(tgt) : F(E) -> F(N)


-----

Poincare duality (topology):
Consider an n-dimensional space.
Poincare duality identifies an i-dimensional object
with a n-i dimensional object.

Now, think about a mesh as a discretization (approximation) of a topological space.

Example:
n = 2

0 ≤ i ≤ n
i = 0     (node/point)
i = 1     (edge/line)
i = 2 = n (face/surface/2-volume)

0 <--> n-0 = n
1 <--> n-1 = 1
2 <--> n-2 = 0

-----

category

f: a -> b


(commutative) diagram:

   f      g
a ---> b ---> c


string diagrams:  (by Poincare duality, n=1)

 a     b     c
--- f --- g ----


"operad" = (symmetric) colored operad = symmetric multicategory

multicategory

f : (a, b) -> c


------

algebra over an operad = functor from operad/multicategory -> Sets

"functor" = multi-functor = functor between multicategories

Algebra is a functor F : C -> Sets (where C is some multicategory)
If we consider C as a "schema",
then F gives concrete meaning to C,
in the sense that it picks out some sets and n-ary functions
which follow the pattern given by C.


example of an operad/multicategory:

objects:
only one object called Int

morphisms:
for every n ≥ 2
n = 2  +₂ : (Int, Int₂) -> Int
n = 3  +₃ : (Int, Int, Int) -> Int
n = 4  +₄ : (Int, Int, Int, Int) -> Int
...

The operad is just a pattern
but it admits an algebra which formalizes addition of n numbers for n = 2, 3, ...

function +₂(a, b)
    a + b
end

function +₃(a, b, c)
    a + b + c
end



-------

isomorphism (in category theory):

    f
a  ----> b
  <-----
    g

if g ∘ f = id_a and f ∘ g = id_b then f / g / (f, g) is an isomorphism


In the category Set, isomorphisms are bijective functions.

In the category Vect, morphisms are linear functions (i.e. a map between vector spaces which preserves the vector space structure).
If we have an isomorphism between two vector spaces,
we may say that the two spaces are the same (as vector spaces).

For a given vector space, you can choose different bases.
An example of such an isomorphism would be a map between different coordinates/bases.

    f
V₁ ----> V₂

Let dim(V₁) = 2.
Pick a basis on V₁: e₁, e₂
Then, f(e₁), f(e₂) is a basis for V₂ if and only if dim(V₂) = dim(V₁).


-------


natural transformation

natural isomorphism = is a natural transformation which is an isomorphism


What is a natural transformation?

Consider you have two functors
F : C₁ -> C₂
G : C₁ -> C₂

A natural transformation α : F -> G
is a family of morphisms α in C₂ indexed by objects in C₁:

i ∈ Ob(C₁) :
αᵢ : F(i) -> G(i)

such that (naturality condition):

for every morphism in C₁ a certain diagram (naturality square) commutes:

i, j ∈ Ob(C₁)
f : i -> j
                   αᵢ
 i           F(i) ----> G(i)

 |            |          |
\/           \/         \/
                   αⱼ
 j           F(j) ----> G(j)


C₁                 C₂
